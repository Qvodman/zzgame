/*页面跳转*/
var _config = {
	color: {
		allTime: 0,
		addTime: 0,
	},
	pic: {
		isOpen: !1,
		allTime: 5,
		addTime: 0,
	}
},
	shareData = {
		imgUrl: " ",
		timeLineLink: " ",
		tTitle: ""
	};
!
function() {
	var a = $("#box"),
		b = {
			defen: $("#room .defen em"),
			start: $("#dialog .btn-restart"),
			back: $("#dialog .btn-back"),
			share: $("#dialog .btn-share"),
			pause: $("#room .btn-pause"),
			resume: $("#dialog .btn-resume"),
			dialog: $("#dialog"),
			d_content: $("#dialog .content"),
			d_pause: $("#dialog .pause"),
			d_gameover: $("#dialog .gameover")
		},
		c = {
			init: function(a, b, c) {
				this.type = a, this.api = API[a], this.config = _config[a], this.reset(), this.parent = c, this.el = b, this.renderUI(), this.inited || this.initEvent(), this.inited = !0, this.start()
			},
			renderUI: function() {
				var b = 90 == window.orientation || -90 == window.orientation,
					c = b ? window.innerHeight : window.innerWidth;
				c -= 20, c = Math.min(c, 500), a.width(c).height(c), this.el.show()
			},
			initEvent: function() {
				var d = "ontouchstart" in document.documentElement ? "touchend" : "click",
					e = this;
				$(window).resize(function() {
					c.renderUI()
				}), a.on(d, "span", function() {
					var a = $(this).data("type");
					"a" == a && e.nextLv.call(e)
				}), b.pause.on(d, _.bind(this.pause, this)), b.resume.on(d, _.bind(this.resume, this)), b.start.on(d, _.bind(this.start, this)), b.back.on(d, _.bind(this.back, this)), b.share.on(d, _.bind(this.share, this))
			},
			share: function() {},
			resume: function() {
			
				b.dialog.hide(), this._pause = !1
			},
			pause: function() {
				
				this._pause = !0, b.d_content.hide(), b.d_pause.show(), b.dialog.show()
			},
			renderInfo: function() {
				b.lv.text(this.lv + 1)
			},
			reset: function() {
				this.time = this.config.allTime, this.lv = -1
			},
			back: function() {
				this._pause = !0, this.el.hide(), b.dialog.hide(), this.parent.render()
			}
		};
	window.Game = c
}(), function(a) {
	var b = {
		index: $("#index"),
		room: $("#room"),
		loading: $("#loading"),
		dialog: $("#dialog"),
		play: $(".play-btn")
	},
		c = {
			init: function() {
				this.initEvent(), this.loading()
			},
			loading: function() {
				function a() {
					f++, f == e && c.render()
				}
				function b() {}
				if (_config.pic.isOpen) for (var d = [], e = d.length, f = 0, g = 0; e > g; g++) {
					var h = new Image;
					h.onload = a, h.src = d[g]
				} else c.render();
			},
			render: function() {
				b.loading.hide(), b.index.show()
			},
			initEvent: function() {
				var a = "ontouchstart" in document.documentElement ? "touchstart" : "click",
					c = this;
				b.play.on(a, function() {
					var a = $(this).data("type") || "color";
					b.index.hide(), Game.init(a, b.room, c)
				})
			}
		};
	c.init(), a.API = {}
}(window);


/*游戏*/

function Block(dom){
	this.dom = dom;
	this.topPos = -500;
	this.step = 2;
	this.clock = null;
	this.state = true;
	this.sum = 0;
}

/****
	*初始化函数
	*/
Block.prototype.init = function(){
	var _t = this;
	for(var i=0;i<4;i++){
		_t.insertRow();
	}
	_t.start();
	_t.dom.onclick = function(e){
		if(!_t.state){
			_t.dom.onclick = null;
		}
		e = e || window.event;
		var target = e.target ||e.srcElement;
		if(target.className.indexOf('block')!=-1){
			_t.sum++;
			console.log(document.getElementById("lv").innerHTML = _t.sum);
			console.log(_t.sum);
			target.className = 'cell';
		}else{
			_t.state = false;
			_t.dom.onclick = null;
			clearInterval(_t.clock);
			alert("得分"+_t.sum);
			window.location.href = "../score.jsp?game=game1&game1_score="+_t.sum;
//			window.location.href="gameover.html";
//			console.log(document.getElementById("defen").innerHTML = _t.sum);
		}
	}
};
/****
	* 添加一行，每一行有4个块
	*/
Block.prototype.insertRow = function(){
	var oRow = this.createCell('row');
	var classArr = this.classArr();
	var oCell = null;
	for(var i=0;i<4;i++){
		oCell = this.createCell(classArr[i]);
		oRow.appendChild(oCell);
	}
	var firChild = this.dom.firstChild;
	if(firChild == null){
		this.dom.appendChild(oRow);	
	} else {
		this.dom.insertBefore(oRow , firChild);
	}
	
};
/****
	*删除一行保证不超过5行，超过5行则认为有漏点到的白块
	*/
Block.prototype.delRow = function(){
	this.dom.removeChild(this.dom.childNodes[this.dom.childNodes.length-1]);
};
/****
	*为一行4个块设置随机的类
	*/
Block.prototype.classArr = function(){
	var arr = ['cell','cell','cell','cell'];
	var i = Math.floor(Math.random()*4);
	arr[i] = 'cell block';
	return arr;
};
/****
	*创建一个单元格，可以使row,也可以是cell
	*/
Block.prototype.createCell = function(className){
	var oDiv = document.createElement('div');
	oDiv.className = className;
	return oDiv;
};
/****
	*判断什么时候把top拉回去，什么时候速度提升，以及黑块总数超过5个停止游戏
	*/
Block.prototype.judge = function(){
	if(this.topPos >= 0){
		this.topPos = -150;
		this.dom.style.height = '750px';
		this.dom.style.top = this.topPos+'px';
		this.insertRow();
		this.delRow();
	}
	this.step = (parseInt(this.sum/5)+1)*1.5; //根据点的白块总数提升速度
	if(this.getEleByClassName('block','div',this.dom).length>=5){
		this.state = false;
		alert("得分"+this.sum);
		window.location.href = "../score.jsp?game=game1&game1_score="+this.sum;
		clearInterval(this.clock);
	}
};
/****
	*根据类名获取形影的类的元素数组，以此判断没点的块的总数是否超过5个
	*/
Block.prototype.getEleByClassName =  function(className,tagName,context){
	context = context || document;
	tagName = tagName || '*';
	if(document.getElementsByClassName) {
		return context.getElementsByClassName(className);
	} else {
		var el = new Array();
		var aEle = context.getElementsByTagName(tagName);
		var re=new RegExp('\\b'+className+'\\b', 'i');
 		var i=0;
 		for(i=0;i<aEle.length;i++)
		{
			if(re.test(aEle[i].className))
			{
				aResult.push(aEle[i]);
			}
		}
		return aResult;
	}
}
/****
	*移动 container 
	*/
Block.prototype.move = function(){
	this.topPos += this.step;
	this.dom.style.top = this.topPos+'px';
};
/****
	*开始游戏
	*/
Block.prototype.start = function(){
	var _t = this;
	_t.clock = setInterval(function(){
		_t.move();
		_t.judge();
	},30);
};
/****
	*结束游戏，封装的有问题，所以游戏结束已经分散处理.....
	*/
Block.prototype.end = function(){};

var oContainer = document.getElementById('container');
var block = new Block(oContainer);
block.init();

